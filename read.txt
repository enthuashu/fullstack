To create server first we need to have server creater which is called "Express"
Express.js provides an easy way to create web server
To install express server we need to right this command on terminal =>
npm install express


when you install any package from npm than a folder (node modules) is created which contains all the functionality and codes of the downloaded package
Package.json tells a summary about our project
In package.json, dependecies maintains a record of all the npm packages installed

node modules => contains all the codes of downloaded packages
package.json => contains information of the project and dependcies which maintains names of downloaded packages from npm
packagelock.json=> contains additional information about the downloaded packages

We never use/edit these files, these are just additional files which give information

To create server 
npm init
step 0=> install express from npm (npm install express) done
step 1=> import express done
step 2=> app = express() done
step 3=> creating server  app.listen(port,call backfunction)
step 4=> writing codes for every frontend requests which are called API (Application Program Interface)

// Port tells about the address of our server
// localhost is used when we do coding in our local computer
//e.g localhost:8000


// callback function is called when its previous program is completed


Postman

whenever we create a full stack project we first create its backend
we write codes for every kind of requests which will come from frontend in future
Till that time, when we don't have frontend, we need some tool which works as a virtual frontend
for making requests to backend
so basically postman is used to make requests to backend until frontend is developed


// status codes are 3 digit codes sent from backend to frontend which tells about the status of the response
// e.g. 200 for successful response
//      201 when data is created at database
//      400 bad requests
//      401 unauthorized
//      404 not found


// routing is a process of selecting a path 
// routing happens both at frontend and backend
// 1. routing at frontend describes which page to show at which route  (found in urls of browser)
// 2. routing at backend describes which data to sent at which route (api) (found in network tab)


e.g. suppose we need profile information of 1000 users one by one,so we cannot define 1000 apis for every users
we define one api (which works as a function) and this api accepts params which tells about user data requested


Both are closely related but they are not the same at all, params are parameters set for the route, query are values resembling variable assignment that provide extra information on what is being required for the route and it will always start with a ? on the URL



There might be situations where we need to have different apis for different users.But writing different apis for different users is very naive.
So we try to do this work by writing just one api.

There are two ways to do so..


1. Using Params
We just need to define a variable using semicolon : while writing api 
and when we call that api that user data is copied in the variable and api do the working

/Api declaration
app.get("/data/:name")  : colon is used
/Api calling
localhost:8000/data/ashu
localhost:8000/data/satyam
getting value = req.params.name







2. Using Queries

/Api declaration
app.get("/data")  no additional declaration
/Api calling
localhost:8000/data?name=Ashu
localhost:8000/data?name=Satyam
getting value = req.query.name





GET method is used when we send data from backend to frontend
e.g. All the messages data, all the posts data etc

POST method is used when we send data from frontend to backend
Data is sent from frontend to backend the form of json called payload


Sending Data from Frontend/Postman to backend
Cick on three dots and select Add request
Change request type to POST
Click on Body
Click on raw
Select JSON from right



// database
Database is responsible for storing data nothing else
Whenever we get request from frontend for any type of data. We ask from database to give data and then server response that data
Also Frontend asks to save some data in database, then database stores data

// Necessary Conditions (Local)
1. Availability of Database (MongoDB) install mongodb server from official site
2. Connection of Database and Server
3. Database is always connected before server initialization
4. To connect database with server we need a connector/package from npm. 
  That Package is called mongoose


  // We have a standard way of maintaning code structure of a project in which we follow certain guidelines
 1. We keep all the connections in separate folder e.g. db connection, aws connection, redis connection
 2.



We use database basically for 4 operations

CRUD Operation 
  
1. Creating Document  (POST) => This creates new entry in database in a collection ☑️☑️
2. Reading Document  (GET) => This used to get Documents from db
3. Updating Document  (PUT/PATCH)  => This used to update existing Documents
4. Deleting Document (DELETE)  => This used to delete Document/Documents

GET,POST,PUT/PATCH,DELETE are called HTTP methods which differentiates work between apis
GET is used to get data from database to frontend
POST is used to send data from frontend to backend then database
PUT/PATCH is used to update data in db
DELETE is used to DELETE data

// MongoDB database is further divided into various sub collections which are responsible for storing particular set of data
e.g. Collection of users, collections of posts, collections of messages, collections of followers etc

Now Every collection has its BLUEPRINT, called Model
This BLUEPRINT tells about the fields and type of fields we will store in this collection



Like we write APIS for our own database. And if we expose this API for public uses, then this is called Public API or Third API key.
Like if we want to know Weather information about a particular city, we will request a third party API.
Similarly if we want OTP service, we will request third party API.
e,g. Jokes API, Weather API, timezone API, Google transplate api